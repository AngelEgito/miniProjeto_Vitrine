{"ast":null,"code":"import { actionChannel } from '@redux-saga/core/effects';\nimport produce from 'immer'; // produce immer é um tipo de produtor de valores que mantém estado (state) junto ao redux\n\n/*\r\n** funções reducer e reducerAmountCart responsável pelo comportamento das ações dispatch em react-redux\r\n** conforme o tipo (type ou action.type) lançado durante o uso da aplicação react.js.\r\n** o state para o estado da loja (store) e action das ações (dispatch) da aplicação\r\n**/\n\nconst INITIAL_AMOUNT = {\n  amount: []\n};\nconst INITIAL_CART = {\n  cart: []\n};\n\n// responsável por adicionar livro ao carrinho através dos dispatchs\nconst reducer = produce((draft, actionChannel) => {\n  switch (actionChannel.type) {\n    // case responsável por adicionar livro por id\n    case '@cart/addSuccess':\n      const {\n        product\n      } = actionChannel;\n      draft.cart[product[0].id] = product;\n      break;\n    // case responsável por remover um livro por id\n    case '@cart/removeItem':\n      draft.cart.splice(draft.cart.indexOf(draft.cart[actionChannel.id]), 1);\n      break;\n    // case responsável por limpar o carrinho\n    case '@cart/clear':\n      draft.cart.splice(0, draft.cart.length);\n  }\n}, INITIAL_CART);\n\n// responsável por atualizar a quantia de cada livro individualmente\nconst reducerAmountCart = produce((draft, action) => {\n  switch (action.type) {\n    // case responsável por adicionar quantia de livros ao adicionar ao carrinho\n    case '@cart/amountSuccess':\n      if (typeof draft.amount[action.id] === 'undefined') draft.amount[action.id] = 1;else draft.amount[action.id]++;\n      break;\n    // case responsável por atualizar a quantia de livros somando (incremented)\n    case '@cart/incremented':\n      draft.amount[action.id]++;\n      break;\n    // case responsável por atualizar a quantia de livros subtraindo (decremented)\n    case '@cart/decremented':\n      if (draft.amount[action.id] > 0) draft.amount[action.id]--;\n      break;\n    // case responsável por remover a quantia de livro por id\n    case '@cart/removeAmount':\n      delete draft.amount[action.id];\n      break;\n    // case responsável por limpar todas as quantias de livros\n    case '@cart/clearAmount':\n      draft.amount.splice(0, draft.amount.length);\n  }\n}, INITIAL_AMOUNT);\n\n// exporta os reducers individualmente\nexport { reducer, reducerAmountCart };","map":{"version":3,"names":["actionChannel","produce","INITIAL_AMOUNT","amount","INITIAL_CART","cart","reducer","draft","type","product","id","splice","indexOf","length","reducerAmountCart","action"],"sources":["C:/Users/Agripino/Desktop/mini_Projeto_ReactJS/src/store/reducer.js"],"sourcesContent":["import { actionChannel } from '@redux-saga/core/effects';\r\nimport produce from 'immer'; // produce immer é um tipo de produtor de valores que mantém estado (state) junto ao redux\r\n\r\n/*\r\n** funções reducer e reducerAmountCart responsável pelo comportamento das ações dispatch em react-redux\r\n** conforme o tipo (type ou action.type) lançado durante o uso da aplicação react.js.\r\n** o state para o estado da loja (store) e action das ações (dispatch) da aplicação\r\n**/\r\n\r\nconst INITIAL_AMOUNT = {\r\n  amount: [],\r\n}\r\n\r\nconst INITIAL_CART = {\r\n  cart: []\r\n}\r\n\r\n// responsável por adicionar livro ao carrinho através dos dispatchs\r\nconst reducer = produce((draft, actionChannel) => {\r\n  switch (actionChannel.type) {\r\n    // case responsável por adicionar livro por id\r\n    case '@cart/addSuccess':\r\n      const {product} = actionChannel;\r\n      draft.cart[product[0].id] = product;\r\n      break;\r\n    // case responsável por remover um livro por id\r\n    case '@cart/removeItem':\r\n      draft.cart.splice(draft.cart.indexOf(draft.cart[actionChannel.id]), 1);  \r\n      break;\r\n    // case responsável por limpar o carrinho\r\n    case '@cart/clear':\r\n      draft.cart.splice(0, draft.cart.length);\r\n  }\r\n}, INITIAL_CART)\r\n\r\n// responsável por atualizar a quantia de cada livro individualmente\r\nconst reducerAmountCart = produce((draft, action) => {\r\n  switch (action.type) {\r\n    // case responsável por adicionar quantia de livros ao adicionar ao carrinho\r\n    case '@cart/amountSuccess':\r\n      if(typeof draft.amount[action.id] === 'undefined')\r\n        draft.amount[action.id] = 1;\r\n      else\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de livros somando (incremented)\r\n    case '@cart/incremented':\r\n        draft.amount[action.id]++;\r\n      break;\r\n    // case responsável por atualizar a quantia de livros subtraindo (decremented)\r\n    case '@cart/decremented':\r\n      if(draft.amount[action.id] > 0)\r\n        draft.amount[action.id]--;\r\n      break;\r\n    // case responsável por remover a quantia de livro por id\r\n    case '@cart/removeAmount':\r\n      delete draft.amount[action.id];\r\n      break;\r\n    // case responsável por limpar todas as quantias de livros\r\n    case '@cart/clearAmount':\r\n      draft.amount.splice(0, draft.amount.length);\r\n  }\r\n}, INITIAL_AMOUNT)\r\n\r\n// exporta os reducers individualmente\r\nexport {reducer, reducerAmountCart};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,OAAO,MAAM,OAAO,CAAC,CAAC;;AAE7B;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGL,OAAO,CAAC,CAACM,KAAK,EAAEP,aAAa,KAAK;EAChD,QAAQA,aAAa,CAACQ,IAAI;IACxB;IACA,KAAK,kBAAkB;MACrB,MAAM;QAACC;MAAO,CAAC,GAAGT,aAAa;MAC/BO,KAAK,CAACF,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC,GAAGD,OAAO;MACnC;IACF;IACA,KAAK,kBAAkB;MACrBF,KAAK,CAACF,IAAI,CAACM,MAAM,CAACJ,KAAK,CAACF,IAAI,CAACO,OAAO,CAACL,KAAK,CAACF,IAAI,CAACL,aAAa,CAACU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACtE;IACF;IACA,KAAK,aAAa;MAChBH,KAAK,CAACF,IAAI,CAACM,MAAM,CAAC,CAAC,EAAEJ,KAAK,CAACF,IAAI,CAACQ,MAAM,CAAC;EAAC;AAE9C,CAAC,EAAET,YAAY,CAAC;;AAEhB;AACA,MAAMU,iBAAiB,GAAGb,OAAO,CAAC,CAACM,KAAK,EAAEQ,MAAM,KAAK;EACnD,QAAQA,MAAM,CAACP,IAAI;IACjB;IACA,KAAK,qBAAqB;MACxB,IAAG,OAAOD,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,KAAK,WAAW,EAC/CH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,GAAG,CAAC,CAAC,KAE5BH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,EAAE;MAC3B;IACF;IACA,KAAK,mBAAmB;MACpBH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,EAAE;MAC3B;IACF;IACA,KAAK,mBAAmB;MACtB,IAAGH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,GAAG,CAAC,EAC5BH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC,EAAE;MAC3B;IACF;IACA,KAAK,oBAAoB;MACvB,OAAOH,KAAK,CAACJ,MAAM,CAACY,MAAM,CAACL,EAAE,CAAC;MAC9B;IACF;IACA,KAAK,mBAAmB;MACtBH,KAAK,CAACJ,MAAM,CAACQ,MAAM,CAAC,CAAC,EAAEJ,KAAK,CAACJ,MAAM,CAACU,MAAM,CAAC;EAAC;AAElD,CAAC,EAAEX,cAAc,CAAC;;AAElB;AACA,SAAQI,OAAO,EAAEQ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}